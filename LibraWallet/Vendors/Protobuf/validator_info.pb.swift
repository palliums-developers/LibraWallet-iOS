// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: validator_info.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) The Libra Core Contributors
// SPDX-License-Identifier: Apache-2.0

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Protobuf definition for the Rust struct ValidatorInfo
struct Types_ValidatorInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Validator account address
  var accountAddress: Data = SwiftProtobuf.Internal.emptyData

  /// Consensus public key
  var consensusPublicKey: Data = SwiftProtobuf.Internal.emptyData

  /// Validator voting power for consensus
  var consensusVotingPower: UInt64 = 0

  /// Network signing publick key
  var networkSigningPublicKey: Data = SwiftProtobuf.Internal.emptyData

  //// Network identity publick key
  var networkIdentityPublicKey: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "types"

extension Types_ValidatorInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ValidatorInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_address"),
    2: .standard(proto: "consensus_public_key"),
    3: .standard(proto: "consensus_voting_power"),
    4: .standard(proto: "network_signing_public_key"),
    5: .standard(proto: "network_identity_public_key"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.accountAddress)
      case 2: try decoder.decodeSingularBytesField(value: &self.consensusPublicKey)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.consensusVotingPower)
      case 4: try decoder.decodeSingularBytesField(value: &self.networkSigningPublicKey)
      case 5: try decoder.decodeSingularBytesField(value: &self.networkIdentityPublicKey)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountAddress.isEmpty {
      try visitor.visitSingularBytesField(value: self.accountAddress, fieldNumber: 1)
    }
    if !self.consensusPublicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.consensusPublicKey, fieldNumber: 2)
    }
    if self.consensusVotingPower != 0 {
      try visitor.visitSingularUInt64Field(value: self.consensusVotingPower, fieldNumber: 3)
    }
    if !self.networkSigningPublicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.networkSigningPublicKey, fieldNumber: 4)
    }
    if !self.networkIdentityPublicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.networkIdentityPublicKey, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Types_ValidatorInfo, rhs: Types_ValidatorInfo) -> Bool {
    if lhs.accountAddress != rhs.accountAddress {return false}
    if lhs.consensusPublicKey != rhs.consensusPublicKey {return false}
    if lhs.consensusVotingPower != rhs.consensusVotingPower {return false}
    if lhs.networkSigningPublicKey != rhs.networkSigningPublicKey {return false}
    if lhs.networkIdentityPublicKey != rhs.networkIdentityPublicKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
