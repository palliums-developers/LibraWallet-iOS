// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: transaction_info.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) The Libra Core Contributors
// SPDX-License-Identifier: Apache-2.0

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// `TransactionInfo` is the object we store in the transaction accumulator. It
/// consists of the transaction as well as the execution result of this
/// transaction. This are later returned to the client so that a client can
/// validate the tree
struct Types_TransactionInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Hash of the transaction that is stored.
  var transactionHash: Data = SwiftProtobuf.Internal.emptyData

  /// The root hash of Sparse Merkle Tree describing the world state at the end
  /// of this transaction
  var stateRootHash: Data = SwiftProtobuf.Internal.emptyData

  /// The root hash of Merkle Accumulator storing all events emitted during this
  /// transaction.
  var eventRootHash: Data = SwiftProtobuf.Internal.emptyData

  /// The amount of gas used by this transaction.
  var gasUsed: UInt64 = 0

  /// The major status of executing this transaction.
  var majorStatus: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "types"

extension Types_TransactionInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransactionInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "transaction_hash"),
    2: .standard(proto: "state_root_hash"),
    3: .standard(proto: "event_root_hash"),
    4: .standard(proto: "gas_used"),
    5: .standard(proto: "major_status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.transactionHash)
      case 2: try decoder.decodeSingularBytesField(value: &self.stateRootHash)
      case 3: try decoder.decodeSingularBytesField(value: &self.eventRootHash)
      case 4: try decoder.decodeSingularUInt64Field(value: &self.gasUsed)
      case 5: try decoder.decodeSingularUInt64Field(value: &self.majorStatus)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.transactionHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.transactionHash, fieldNumber: 1)
    }
    if !self.stateRootHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.stateRootHash, fieldNumber: 2)
    }
    if !self.eventRootHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.eventRootHash, fieldNumber: 3)
    }
    if self.gasUsed != 0 {
      try visitor.visitSingularUInt64Field(value: self.gasUsed, fieldNumber: 4)
    }
    if self.majorStatus != 0 {
      try visitor.visitSingularUInt64Field(value: self.majorStatus, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Types_TransactionInfo, rhs: Types_TransactionInfo) -> Bool {
    if lhs.transactionHash != rhs.transactionHash {return false}
    if lhs.stateRootHash != rhs.stateRootHash {return false}
    if lhs.eventRootHash != rhs.eventRootHash {return false}
    if lhs.gasUsed != rhs.gasUsed {return false}
    if lhs.majorStatus != rhs.majorStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
