//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: mempool.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Mempool_MempoolAddTransactionWithValidationCall: ClientCallUnary {}

fileprivate final class Mempool_MempoolAddTransactionWithValidationCallBase: ClientCallUnaryBase<Mempool_AddTransactionWithValidationRequest, Mempool_AddTransactionWithValidationResponse>, Mempool_MempoolAddTransactionWithValidationCall {
  override class var method: String { return "/mempool.Mempool/AddTransactionWithValidation" }
}

internal protocol Mempool_MempoolGetBlockCall: ClientCallUnary {}

fileprivate final class Mempool_MempoolGetBlockCallBase: ClientCallUnaryBase<Mempool_GetBlockRequest, Mempool_GetBlockResponse>, Mempool_MempoolGetBlockCall {
  override class var method: String { return "/mempool.Mempool/GetBlock" }
}

internal protocol Mempool_MempoolCommitTransactionsCall: ClientCallUnary {}

fileprivate final class Mempool_MempoolCommitTransactionsCallBase: ClientCallUnaryBase<Mempool_CommitTransactionsRequest, Mempool_CommitTransactionsResponse>, Mempool_MempoolCommitTransactionsCall {
  override class var method: String { return "/mempool.Mempool/CommitTransactions" }
}

internal protocol Mempool_MempoolHealthCheckCall: ClientCallUnary {}

fileprivate final class Mempool_MempoolHealthCheckCallBase: ClientCallUnaryBase<Mempool_HealthCheckRequest, Mempool_HealthCheckResponse>, Mempool_MempoolHealthCheckCall {
  override class var method: String { return "/mempool.Mempool/HealthCheck" }
}


/// Instantiate Mempool_MempoolServiceClient, then call methods of this protocol to make API calls.
internal protocol Mempool_MempoolService: ServiceClient {
  /// Synchronous. Unary.
  func addTransactionWithValidation(_ request: Mempool_AddTransactionWithValidationRequest) throws -> Mempool_AddTransactionWithValidationResponse
  /// Asynchronous. Unary.
  func addTransactionWithValidation(_ request: Mempool_AddTransactionWithValidationRequest, completion: @escaping (Mempool_AddTransactionWithValidationResponse?, CallResult) -> Void) throws -> Mempool_MempoolAddTransactionWithValidationCall

  /// Synchronous. Unary.
  func getBlock(_ request: Mempool_GetBlockRequest) throws -> Mempool_GetBlockResponse
  /// Asynchronous. Unary.
  func getBlock(_ request: Mempool_GetBlockRequest, completion: @escaping (Mempool_GetBlockResponse?, CallResult) -> Void) throws -> Mempool_MempoolGetBlockCall

  /// Synchronous. Unary.
  func commitTransactions(_ request: Mempool_CommitTransactionsRequest) throws -> Mempool_CommitTransactionsResponse
  /// Asynchronous. Unary.
  func commitTransactions(_ request: Mempool_CommitTransactionsRequest, completion: @escaping (Mempool_CommitTransactionsResponse?, CallResult) -> Void) throws -> Mempool_MempoolCommitTransactionsCall

  /// Synchronous. Unary.
  func healthCheck(_ request: Mempool_HealthCheckRequest) throws -> Mempool_HealthCheckResponse
  /// Asynchronous. Unary.
  func healthCheck(_ request: Mempool_HealthCheckRequest, completion: @escaping (Mempool_HealthCheckResponse?, CallResult) -> Void) throws -> Mempool_MempoolHealthCheckCall

}

internal final class Mempool_MempoolServiceClient: ServiceClientBase, Mempool_MempoolService {
  /// Synchronous. Unary.
  internal func addTransactionWithValidation(_ request: Mempool_AddTransactionWithValidationRequest) throws -> Mempool_AddTransactionWithValidationResponse {
    return try Mempool_MempoolAddTransactionWithValidationCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func addTransactionWithValidation(_ request: Mempool_AddTransactionWithValidationRequest, completion: @escaping (Mempool_AddTransactionWithValidationResponse?, CallResult) -> Void) throws -> Mempool_MempoolAddTransactionWithValidationCall {
    return try Mempool_MempoolAddTransactionWithValidationCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getBlock(_ request: Mempool_GetBlockRequest) throws -> Mempool_GetBlockResponse {
    return try Mempool_MempoolGetBlockCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getBlock(_ request: Mempool_GetBlockRequest, completion: @escaping (Mempool_GetBlockResponse?, CallResult) -> Void) throws -> Mempool_MempoolGetBlockCall {
    return try Mempool_MempoolGetBlockCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func commitTransactions(_ request: Mempool_CommitTransactionsRequest) throws -> Mempool_CommitTransactionsResponse {
    return try Mempool_MempoolCommitTransactionsCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func commitTransactions(_ request: Mempool_CommitTransactionsRequest, completion: @escaping (Mempool_CommitTransactionsResponse?, CallResult) -> Void) throws -> Mempool_MempoolCommitTransactionsCall {
    return try Mempool_MempoolCommitTransactionsCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func healthCheck(_ request: Mempool_HealthCheckRequest) throws -> Mempool_HealthCheckResponse {
    return try Mempool_MempoolHealthCheckCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func healthCheck(_ request: Mempool_HealthCheckRequest, completion: @escaping (Mempool_HealthCheckResponse?, CallResult) -> Void) throws -> Mempool_MempoolHealthCheckCall {
    return try Mempool_MempoolHealthCheckCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Mempool_MempoolProvider: ServiceProvider {
  func addTransactionWithValidation(request: Mempool_AddTransactionWithValidationRequest, session: Mempool_MempoolAddTransactionWithValidationSession) throws -> Mempool_AddTransactionWithValidationResponse
  func getBlock(request: Mempool_GetBlockRequest, session: Mempool_MempoolGetBlockSession) throws -> Mempool_GetBlockResponse
  func commitTransactions(request: Mempool_CommitTransactionsRequest, session: Mempool_MempoolCommitTransactionsSession) throws -> Mempool_CommitTransactionsResponse
  func healthCheck(request: Mempool_HealthCheckRequest, session: Mempool_MempoolHealthCheckSession) throws -> Mempool_HealthCheckResponse
}

extension Mempool_MempoolProvider {
  internal var serviceName: String { return "mempool.Mempool" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/mempool.Mempool/AddTransactionWithValidation":
      return try Mempool_MempoolAddTransactionWithValidationSessionBase(
        handler: handler,
        providerBlock: { try self.addTransactionWithValidation(request: $0, session: $1 as! Mempool_MempoolAddTransactionWithValidationSessionBase) })
          .run()
    case "/mempool.Mempool/GetBlock":
      return try Mempool_MempoolGetBlockSessionBase(
        handler: handler,
        providerBlock: { try self.getBlock(request: $0, session: $1 as! Mempool_MempoolGetBlockSessionBase) })
          .run()
    case "/mempool.Mempool/CommitTransactions":
      return try Mempool_MempoolCommitTransactionsSessionBase(
        handler: handler,
        providerBlock: { try self.commitTransactions(request: $0, session: $1 as! Mempool_MempoolCommitTransactionsSessionBase) })
          .run()
    case "/mempool.Mempool/HealthCheck":
      return try Mempool_MempoolHealthCheckSessionBase(
        handler: handler,
        providerBlock: { try self.healthCheck(request: $0, session: $1 as! Mempool_MempoolHealthCheckSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol Mempool_MempoolAddTransactionWithValidationSession: ServerSessionUnary {}

fileprivate final class Mempool_MempoolAddTransactionWithValidationSessionBase: ServerSessionUnaryBase<Mempool_AddTransactionWithValidationRequest, Mempool_AddTransactionWithValidationResponse>, Mempool_MempoolAddTransactionWithValidationSession {}

internal protocol Mempool_MempoolGetBlockSession: ServerSessionUnary {}

fileprivate final class Mempool_MempoolGetBlockSessionBase: ServerSessionUnaryBase<Mempool_GetBlockRequest, Mempool_GetBlockResponse>, Mempool_MempoolGetBlockSession {}

internal protocol Mempool_MempoolCommitTransactionsSession: ServerSessionUnary {}

fileprivate final class Mempool_MempoolCommitTransactionsSessionBase: ServerSessionUnaryBase<Mempool_CommitTransactionsRequest, Mempool_CommitTransactionsResponse>, Mempool_MempoolCommitTransactionsSession {}

internal protocol Mempool_MempoolHealthCheckSession: ServerSessionUnary {}

fileprivate final class Mempool_MempoolHealthCheckSessionBase: ServerSessionUnaryBase<Mempool_HealthCheckRequest, Mempool_HealthCheckResponse>, Mempool_MempoolHealthCheckSession {}

