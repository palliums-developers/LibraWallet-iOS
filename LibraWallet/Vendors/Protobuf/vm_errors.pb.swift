// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: vm_errors.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) The Libra Core Contributors
// SPDX-License-Identifier: Apache-2.0

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The statuses and errors produced by the VM can be categorized into a
/// couple different types:
/// 1. Validation Statuses: all the errors that can (/should) be
///    the result of executing the prologue -- these are primarily used by
///    the vm validator and AC.
/// 2. Verification Errors: errors that are the result of performing
///    bytecode verification (happens at the time of publishing).
/// 3. VM Invariant Errors: errors that arise from an internal invariant of
///    the VM being violated. These signify a problem with either the VM or
///    bytecode verifier.
/// 4. Binary Errors: errors that can occur during the process of
///    deserialization of a transaction.
/// 5. Runtime Statuses: errors that can arise from the execution of a
///    transaction (assuming the prologue executes without error). These are
///    errors that can occur during execution due to things such as division
///    by zero, running out of gas, etc. These do not signify an issue with
///    the VM.
struct Types_VMStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// e.g. assertion violation, out of gas
  var majorStatus: UInt64 = 0

  /// Any substatus code. e.g. assertion error number
  var hasSubStatus_p: Bool = false

  var subStatus: UInt64 = 0

  var hasMessage_p: Bool = false

  var message: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "types"

extension Types_VMStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VMStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "major_status"),
    2: .standard(proto: "has_sub_status"),
    3: .standard(proto: "sub_status"),
    4: .standard(proto: "has_message"),
    5: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.majorStatus)
      case 2: try decoder.decodeSingularBoolField(value: &self.hasSubStatus_p)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.subStatus)
      case 4: try decoder.decodeSingularBoolField(value: &self.hasMessage_p)
      case 5: try decoder.decodeSingularStringField(value: &self.message)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.majorStatus != 0 {
      try visitor.visitSingularUInt64Field(value: self.majorStatus, fieldNumber: 1)
    }
    if self.hasSubStatus_p != false {
      try visitor.visitSingularBoolField(value: self.hasSubStatus_p, fieldNumber: 2)
    }
    if self.subStatus != 0 {
      try visitor.visitSingularUInt64Field(value: self.subStatus, fieldNumber: 3)
    }
    if self.hasMessage_p != false {
      try visitor.visitSingularBoolField(value: self.hasMessage_p, fieldNumber: 4)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Types_VMStatus, rhs: Types_VMStatus) -> Bool {
    if lhs.majorStatus != rhs.majorStatus {return false}
    if lhs.hasSubStatus_p != rhs.hasSubStatus_p {return false}
    if lhs.subStatus != rhs.subStatus {return false}
    if lhs.hasMessage_p != rhs.hasMessage_p {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
