// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: admission_control.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) The Libra Core Contributors
// SPDX-License-Identifier: Apache-2.0

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Additional statuses that are possible from admission control in addition
/// to VM statuses.
enum AdmissionControl_AdmissionControlStatusCode: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// Validator accepted the transaction.
  case accepted // = 0

  /// The sender is blacklisted.
  case blacklisted // = 1

  /// The transaction is rejected, e.g. due to incorrect signature.
  case rejected // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .accepted
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .accepted
    case 1: self = .blacklisted
    case 2: self = .rejected
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .accepted: return 0
    case .blacklisted: return 1
    case .rejected: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension AdmissionControl_AdmissionControlStatusCode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [AdmissionControl_AdmissionControlStatusCode] = [
    .accepted,
    .blacklisted,
    .rejected,
  ]
}

#endif  // swift(>=4.2)

/// The request for submitting a transaction to an upstream validator or full
/// node.
struct AdmissionControl_AdmissionControlMsg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var message: OneOf_Message? {
    get {return _storage._message}
    set {_uniqueStorage()._message = newValue}
  }

  var submitTransactionRequest: AdmissionControl_SubmitTransactionRequest {
    get {
      if case .submitTransactionRequest(let v)? = _storage._message {return v}
      return AdmissionControl_SubmitTransactionRequest()
    }
    set {_uniqueStorage()._message = .submitTransactionRequest(newValue)}
  }

  var submitTransactionResponse: AdmissionControl_SubmitTransactionResponse {
    get {
      if case .submitTransactionResponse(let v)? = _storage._message {return v}
      return AdmissionControl_SubmitTransactionResponse()
    }
    set {_uniqueStorage()._message = .submitTransactionResponse(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Message: Equatable {
    case submitTransactionRequest(AdmissionControl_SubmitTransactionRequest)
    case submitTransactionResponse(AdmissionControl_SubmitTransactionResponse)

  #if !swift(>=4.1)
    static func ==(lhs: AdmissionControl_AdmissionControlMsg.OneOf_Message, rhs: AdmissionControl_AdmissionControlMsg.OneOf_Message) -> Bool {
      switch (lhs, rhs) {
      case (.submitTransactionRequest(let l), .submitTransactionRequest(let r)): return l == r
      case (.submitTransactionResponse(let l), .submitTransactionResponse(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// -----------------------------------------------------------------------------
/// ---------------- Submit transaction
/// -----------------------------------------------------------------------------
/// The request for transaction submission.
struct AdmissionControl_SubmitTransactionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Transaction submitted by user.
  var transaction: Types_SignedTransaction {
    get {return _storage._transaction ?? Types_SignedTransaction()}
    set {_uniqueStorage()._transaction = newValue}
  }
  /// Returns true if `transaction` has been explicitly set.
  var hasTransaction: Bool {return _storage._transaction != nil}
  /// Clears the value of `transaction`. Subsequent reads from it will return its default value.
  mutating func clearTransaction() {_uniqueStorage()._transaction = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// AC response status containing code and optionally an error message.
struct AdmissionControl_AdmissionControlStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var code: AdmissionControl_AdmissionControlStatusCode = .accepted

  var message: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// The response for transaction submission.
///
/// How does a client know if their transaction was included?
/// A response from the transaction submission only means that the transaction
/// was successfully added to mempool, but not that it is guaranteed to be
/// included in the chain.  Each transaction should include an expiration time in
/// the signed transaction.  Let's call this T0.  As a client, I submit my
/// transaction to a validator. I now need to poll for the transaction I
/// submitted.  I can use the query that takes my account and sequence number. If
/// I receive back that the transaction is completed, I will verify the proofs to
/// ensure that this is the transaction I expected.  If I receive a response that
/// my transaction is not yet completed, I must check the latest timestamp in the
/// ledgerInfo that I receive back from the query.  If this time is greater than
/// T0, I can be certain that my transaction will never be included.  If this
/// time is less than T0, I need to continue polling.
struct AdmissionControl_SubmitTransactionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The status of a transaction submission can either be a VM status, or
  /// some other admission control/mempool specific status e.g. Blacklisted.
  var status: OneOf_Status? {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  var vmStatus: Types_VMStatus {
    get {
      if case .vmStatus(let v)? = _storage._status {return v}
      return Types_VMStatus()
    }
    set {_uniqueStorage()._status = .vmStatus(newValue)}
  }

  var acStatus: AdmissionControl_AdmissionControlStatus {
    get {
      if case .acStatus(let v)? = _storage._status {return v}
      return AdmissionControl_AdmissionControlStatus()
    }
    set {_uniqueStorage()._status = .acStatus(newValue)}
  }

  var mempoolStatus: Types_MempoolStatus {
    get {
      if case .mempoolStatus(let v)? = _storage._status {return v}
      return Types_MempoolStatus()
    }
    set {_uniqueStorage()._status = .mempoolStatus(newValue)}
  }

  /// Public key(id) of the validator that processed this transaction
  var validatorID: Data {
    get {return _storage._validatorID}
    set {_uniqueStorage()._validatorID = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The status of a transaction submission can either be a VM status, or
  /// some other admission control/mempool specific status e.g. Blacklisted.
  enum OneOf_Status: Equatable {
    case vmStatus(Types_VMStatus)
    case acStatus(AdmissionControl_AdmissionControlStatus)
    case mempoolStatus(Types_MempoolStatus)

  #if !swift(>=4.1)
    static func ==(lhs: AdmissionControl_SubmitTransactionResponse.OneOf_Status, rhs: AdmissionControl_SubmitTransactionResponse.OneOf_Status) -> Bool {
      switch (lhs, rhs) {
      case (.vmStatus(let l), .vmStatus(let r)): return l == r
      case (.acStatus(let l), .acStatus(let r)): return l == r
      case (.mempoolStatus(let l), .mempoolStatus(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "admission_control"

extension AdmissionControl_AdmissionControlStatusCode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Accepted"),
    1: .same(proto: "Blacklisted"),
    2: .same(proto: "Rejected"),
  ]
}

extension AdmissionControl_AdmissionControlMsg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdmissionControlMsg"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "submit_transaction_request"),
    2: .standard(proto: "submit_transaction_response"),
  ]

  fileprivate class _StorageClass {
    var _message: AdmissionControl_AdmissionControlMsg.OneOf_Message?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _message = source._message
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: AdmissionControl_SubmitTransactionRequest?
          if let current = _storage._message {
            try decoder.handleConflictingOneOf()
            if case .submitTransactionRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._message = .submitTransactionRequest(v)}
        case 2:
          var v: AdmissionControl_SubmitTransactionResponse?
          if let current = _storage._message {
            try decoder.handleConflictingOneOf()
            if case .submitTransactionResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._message = .submitTransactionResponse(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._message {
      case .submitTransactionRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .submitTransactionResponse(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AdmissionControl_AdmissionControlMsg, rhs: AdmissionControl_AdmissionControlMsg) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._message != rhs_storage._message {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AdmissionControl_SubmitTransactionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubmitTransactionRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transaction"),
  ]

  fileprivate class _StorageClass {
    var _transaction: Types_SignedTransaction? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _transaction = source._transaction
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._transaction)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._transaction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AdmissionControl_SubmitTransactionRequest, rhs: AdmissionControl_SubmitTransactionRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._transaction != rhs_storage._transaction {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AdmissionControl_AdmissionControlStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdmissionControlStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.message)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .accepted {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AdmissionControl_AdmissionControlStatus, rhs: AdmissionControl_AdmissionControlStatus) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AdmissionControl_SubmitTransactionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubmitTransactionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vm_status"),
    2: .standard(proto: "ac_status"),
    3: .standard(proto: "mempool_status"),
    4: .standard(proto: "validator_id"),
  ]

  fileprivate class _StorageClass {
    var _status: AdmissionControl_SubmitTransactionResponse.OneOf_Status?
    var _validatorID: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _validatorID = source._validatorID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Types_VMStatus?
          if let current = _storage._status {
            try decoder.handleConflictingOneOf()
            if case .vmStatus(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._status = .vmStatus(v)}
        case 2:
          var v: AdmissionControl_AdmissionControlStatus?
          if let current = _storage._status {
            try decoder.handleConflictingOneOf()
            if case .acStatus(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._status = .acStatus(v)}
        case 3:
          var v: Types_MempoolStatus?
          if let current = _storage._status {
            try decoder.handleConflictingOneOf()
            if case .mempoolStatus(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._status = .mempoolStatus(v)}
        case 4: try decoder.decodeSingularBytesField(value: &_storage._validatorID)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._status {
      case .vmStatus(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .acStatus(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .mempoolStatus(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case nil: break
      }
      if !_storage._validatorID.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._validatorID, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AdmissionControl_SubmitTransactionResponse, rhs: AdmissionControl_SubmitTransactionResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._validatorID != rhs_storage._validatorID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
