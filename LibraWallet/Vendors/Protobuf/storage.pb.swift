// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: storage.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) The Libra Core Contributors
// SPDX-License-Identifier: Apache-2.0

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Storage_SaveTransactionsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Transactions to persist.
  var txnsToCommit: [Types_TransactionToCommit] {
    get {return _storage._txnsToCommit}
    set {_uniqueStorage()._txnsToCommit = newValue}
  }

  /// The version of the first transaction in `txns_to_commit`.
  var firstVersion: UInt64 {
    get {return _storage._firstVersion}
    set {_uniqueStorage()._firstVersion = newValue}
  }

  /// If this is set, Storage will check its state after applying the above
  /// transactions matches info in this LedgerInfo before committing otherwise
  /// it denies the request.
  var ledgerInfoWithSignatures: Types_LedgerInfoWithSignatures {
    get {return _storage._ledgerInfoWithSignatures ?? Types_LedgerInfoWithSignatures()}
    set {_uniqueStorage()._ledgerInfoWithSignatures = newValue}
  }
  /// Returns true if `ledgerInfoWithSignatures` has been explicitly set.
  var hasLedgerInfoWithSignatures: Bool {return _storage._ledgerInfoWithSignatures != nil}
  /// Clears the value of `ledgerInfoWithSignatures`. Subsequent reads from it will return its default value.
  mutating func clearLedgerInfoWithSignatures() {_uniqueStorage()._ledgerInfoWithSignatures = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Storage_SaveTransactionsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Storage_GetTransactionsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The version to start with.
  var startVersion: UInt64 = 0

  /// The size of the transaction batch.
  var batchSize: UInt64 = 0

  /// All the proofs returned in the response should be relative to this
  /// given version.
  var ledgerVersion: UInt64 = 0

  /// Used to return the events associated with each transaction
  var fetchEvents: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Storage_GetTransactionsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var txnListWithProof: Types_TransactionListWithProof {
    get {return _storage._txnListWithProof ?? Types_TransactionListWithProof()}
    set {_uniqueStorage()._txnListWithProof = newValue}
  }
  /// Returns true if `txnListWithProof` has been explicitly set.
  var hasTxnListWithProof: Bool {return _storage._txnListWithProof != nil}
  /// Clears the value of `txnListWithProof`. Subsequent reads from it will return its default value.
  mutating func clearTxnListWithProof() {_uniqueStorage()._txnListWithProof = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Storage_GetLatestStateRootRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Storage_GetLatestStateRootResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: UInt64 = 0

  var stateRootHash: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Storage_GetLatestAccountStateRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Storage_GetLatestAccountStateResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accountStateBlob: Types_AccountStateBlob {
    get {return _storage._accountStateBlob ?? Types_AccountStateBlob()}
    set {_uniqueStorage()._accountStateBlob = newValue}
  }
  /// Returns true if `accountStateBlob` has been explicitly set.
  var hasAccountStateBlob: Bool {return _storage._accountStateBlob != nil}
  /// Clears the value of `accountStateBlob`. Subsequent reads from it will return its default value.
  mutating func clearAccountStateBlob() {_uniqueStorage()._accountStateBlob = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Storage_GetAccountStateWithProofByVersionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// The account address to query with.
  var address: Data = SwiftProtobuf.Internal.emptyData

  //// The version the query is based on.
  var version: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Storage_GetAccountStateWithProofByVersionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// The optional blob of account state blob.
  var accountStateBlob: Types_AccountStateBlob {
    get {return _storage._accountStateBlob ?? Types_AccountStateBlob()}
    set {_uniqueStorage()._accountStateBlob = newValue}
  }
  /// Returns true if `accountStateBlob` has been explicitly set.
  var hasAccountStateBlob: Bool {return _storage._accountStateBlob != nil}
  /// Clears the value of `accountStateBlob`. Subsequent reads from it will return its default value.
  mutating func clearAccountStateBlob() {_uniqueStorage()._accountStateBlob = nil}

  //// The state root hash the query is based on.
  var sparseMerkleProof: Types_SparseMerkleProof {
    get {return _storage._sparseMerkleProof ?? Types_SparseMerkleProof()}
    set {_uniqueStorage()._sparseMerkleProof = newValue}
  }
  /// Returns true if `sparseMerkleProof` has been explicitly set.
  var hasSparseMerkleProof: Bool {return _storage._sparseMerkleProof != nil}
  /// Clears the value of `sparseMerkleProof`. Subsequent reads from it will return its default value.
  mutating func clearSparseMerkleProof() {_uniqueStorage()._sparseMerkleProof = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Storage_GetStartupInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Storage_GetStartupInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// When this is empty, Storage needs to be bootstrapped via the bootstrap API
  var info: Storage_StartupInfo {
    get {return _storage._info ?? Storage_StartupInfo()}
    set {_uniqueStorage()._info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  var hasInfo: Bool {return _storage._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  mutating func clearInfo() {_uniqueStorage()._info = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Storage_TreeState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The version of the tree state. All fields below are based on this version.
  var version: UInt64 = 0

  /// From left to right, root hashes of all frozen subtrees.
  var ledgerFrozenSubtreeHashes: [Data] = []

  /// The latest account state root hash.
  var accountStateRootHash: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Storage_StartupInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The latest committed LedgerInfo. Note that at start up storage can have
  /// more transactions than the latest committed LedgerInfo indicates due to an
  /// incomplete start up sync.
  var latestLedgerInfo: Types_LedgerInfoWithSignatures {
    get {return _storage._latestLedgerInfo ?? Types_LedgerInfoWithSignatures()}
    set {_uniqueStorage()._latestLedgerInfo = newValue}
  }
  /// Returns true if `latestLedgerInfo` has been explicitly set.
  var hasLatestLedgerInfo: Bool {return _storage._latestLedgerInfo != nil}
  /// Clears the value of `latestLedgerInfo`. Subsequent reads from it will return its default value.
  mutating func clearLatestLedgerInfo() {_uniqueStorage()._latestLedgerInfo = nil}

  /// If the above LedgerInfo doesn't carry a validator set (which is normally
  /// the case unless the above is on an epoch boundary), the latest validator
  /// set.
  var latestValidatorSet: Types_ValidatorSet {
    get {return _storage._latestValidatorSet ?? Types_ValidatorSet()}
    set {_uniqueStorage()._latestValidatorSet = newValue}
  }
  /// Returns true if `latestValidatorSet` has been explicitly set.
  var hasLatestValidatorSet: Bool {return _storage._latestValidatorSet != nil}
  /// Clears the value of `latestValidatorSet`. Subsequent reads from it will return its default value.
  mutating func clearLatestValidatorSet() {_uniqueStorage()._latestValidatorSet = nil}

  /// The latest committed tree state matching the ledger info above.
  var committedTreeState: Storage_TreeState {
    get {return _storage._committedTreeState ?? Storage_TreeState()}
    set {_uniqueStorage()._committedTreeState = newValue}
  }
  /// Returns true if `committedTreeState` has been explicitly set.
  var hasCommittedTreeState: Bool {return _storage._committedTreeState != nil}
  /// Clears the value of `committedTreeState`. Subsequent reads from it will return its default value.
  mutating func clearCommittedTreeState() {_uniqueStorage()._committedTreeState = nil}

  /// The latest synced tree state when the number of transactions is more than
  /// ledger_info indicates.
  var syncedTreeState: Storage_TreeState {
    get {return _storage._syncedTreeState ?? Storage_TreeState()}
    set {_uniqueStorage()._syncedTreeState = newValue}
  }
  /// Returns true if `syncedTreeState` has been explicitly set.
  var hasSyncedTreeState: Bool {return _storage._syncedTreeState != nil}
  /// Clears the value of `syncedTreeState`. Subsequent reads from it will return its default value.
  mutating func clearSyncedTreeState() {_uniqueStorage()._syncedTreeState = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Storage_GetEpochChangeLedgerInfosRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// The last epoch number with available information to the client.
  var startEpoch: UInt64 = 0

  //// The target epoch number that client wants to sync to.
  var endEpoch: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Storage_BackupAccountStateRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Version at which to start the backup
  var version: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Storage_BackupAccountStateResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Account Key (32-byte hash value)
  var accountKey: Data {
    get {return _storage._accountKey}
    set {_uniqueStorage()._accountKey = newValue}
  }

  /// Raw account state
  var accountStateBlob: Types_AccountStateBlob {
    get {return _storage._accountStateBlob ?? Types_AccountStateBlob()}
    set {_uniqueStorage()._accountStateBlob = newValue}
  }
  /// Returns true if `accountStateBlob` has been explicitly set.
  var hasAccountStateBlob: Bool {return _storage._accountStateBlob != nil}
  /// Clears the value of `accountStateBlob`. Subsequent reads from it will return its default value.
  mutating func clearAccountStateBlob() {_uniqueStorage()._accountStateBlob = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Storage_GetAccountStateRangeProofRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The rightmost key in the range to prove.
  var rightmostKey: Data = SwiftProtobuf.Internal.emptyData

  /// The version of the state.
  var version: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Storage_GetAccountStateRangeProofResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var proof: Types_SparseMerkleRangeProof {
    get {return _storage._proof ?? Types_SparseMerkleRangeProof()}
    set {_uniqueStorage()._proof = newValue}
  }
  /// Returns true if `proof` has been explicitly set.
  var hasProof: Bool {return _storage._proof != nil}
  /// Clears the value of `proof`. Subsequent reads from it will return its default value.
  mutating func clearProof() {_uniqueStorage()._proof = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Storage_BackupTransactionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The version of the first transaction.
  var startVersion: UInt64 = 0

  /// Number of transactions to request.
  var numTransactions: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Storage_BackupTransactionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var transaction: Types_Transaction {
    get {return _storage._transaction ?? Types_Transaction()}
    set {_uniqueStorage()._transaction = newValue}
  }
  /// Returns true if `transaction` has been explicitly set.
  var hasTransaction: Bool {return _storage._transaction != nil}
  /// Clears the value of `transaction`. Subsequent reads from it will return its default value.
  mutating func clearTransaction() {_uniqueStorage()._transaction = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Storage_BackupTransactionInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The version of the first transaction info.
  var startVersion: UInt64 = 0

  /// Number of transaction infos to request.
  var numTransactions: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Storage_BackupTransactionInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var transactionInfo: Types_TransactionInfo {
    get {return _storage._transactionInfo ?? Types_TransactionInfo()}
    set {_uniqueStorage()._transactionInfo = newValue}
  }
  /// Returns true if `transactionInfo` has been explicitly set.
  var hasTransactionInfo: Bool {return _storage._transactionInfo != nil}
  /// Clears the value of `transactionInfo`. Subsequent reads from it will return its default value.
  mutating func clearTransactionInfo() {_uniqueStorage()._transactionInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "storage"

extension Storage_SaveTransactionsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SaveTransactionsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "txns_to_commit"),
    2: .standard(proto: "first_version"),
    3: .standard(proto: "ledger_info_with_signatures"),
  ]

  fileprivate class _StorageClass {
    var _txnsToCommit: [Types_TransactionToCommit] = []
    var _firstVersion: UInt64 = 0
    var _ledgerInfoWithSignatures: Types_LedgerInfoWithSignatures? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _txnsToCommit = source._txnsToCommit
      _firstVersion = source._firstVersion
      _ledgerInfoWithSignatures = source._ledgerInfoWithSignatures
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._txnsToCommit)
        case 2: try decoder.decodeSingularUInt64Field(value: &_storage._firstVersion)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._ledgerInfoWithSignatures)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._txnsToCommit.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._txnsToCommit, fieldNumber: 1)
      }
      if _storage._firstVersion != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._firstVersion, fieldNumber: 2)
      }
      if let v = _storage._ledgerInfoWithSignatures {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Storage_SaveTransactionsRequest, rhs: Storage_SaveTransactionsRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._txnsToCommit != rhs_storage._txnsToCommit {return false}
        if _storage._firstVersion != rhs_storage._firstVersion {return false}
        if _storage._ledgerInfoWithSignatures != rhs_storage._ledgerInfoWithSignatures {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Storage_SaveTransactionsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SaveTransactionsResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Storage_SaveTransactionsResponse, rhs: Storage_SaveTransactionsResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Storage_GetTransactionsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetTransactionsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_version"),
    2: .standard(proto: "batch_size"),
    3: .standard(proto: "ledger_version"),
    4: .standard(proto: "fetch_events"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.startVersion)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.batchSize)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.ledgerVersion)
      case 4: try decoder.decodeSingularBoolField(value: &self.fetchEvents)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.startVersion != 0 {
      try visitor.visitSingularUInt64Field(value: self.startVersion, fieldNumber: 1)
    }
    if self.batchSize != 0 {
      try visitor.visitSingularUInt64Field(value: self.batchSize, fieldNumber: 2)
    }
    if self.ledgerVersion != 0 {
      try visitor.visitSingularUInt64Field(value: self.ledgerVersion, fieldNumber: 3)
    }
    if self.fetchEvents != false {
      try visitor.visitSingularBoolField(value: self.fetchEvents, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Storage_GetTransactionsRequest, rhs: Storage_GetTransactionsRequest) -> Bool {
    if lhs.startVersion != rhs.startVersion {return false}
    if lhs.batchSize != rhs.batchSize {return false}
    if lhs.ledgerVersion != rhs.ledgerVersion {return false}
    if lhs.fetchEvents != rhs.fetchEvents {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Storage_GetTransactionsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetTransactionsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "txn_list_with_proof"),
  ]

  fileprivate class _StorageClass {
    var _txnListWithProof: Types_TransactionListWithProof? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _txnListWithProof = source._txnListWithProof
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._txnListWithProof)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._txnListWithProof {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Storage_GetTransactionsResponse, rhs: Storage_GetTransactionsResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._txnListWithProof != rhs_storage._txnListWithProof {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Storage_GetLatestStateRootRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetLatestStateRootRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Storage_GetLatestStateRootRequest, rhs: Storage_GetLatestStateRootRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Storage_GetLatestStateRootResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetLatestStateRootResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .standard(proto: "state_root_hash"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.version)
      case 2: try decoder.decodeSingularBytesField(value: &self.stateRootHash)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.version != 0 {
      try visitor.visitSingularUInt64Field(value: self.version, fieldNumber: 1)
    }
    if !self.stateRootHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.stateRootHash, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Storage_GetLatestStateRootResponse, rhs: Storage_GetLatestStateRootResponse) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.stateRootHash != rhs.stateRootHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Storage_GetLatestAccountStateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetLatestAccountStateRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.address)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularBytesField(value: self.address, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Storage_GetLatestAccountStateRequest, rhs: Storage_GetLatestAccountStateRequest) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Storage_GetLatestAccountStateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetLatestAccountStateResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_state_blob"),
  ]

  fileprivate class _StorageClass {
    var _accountStateBlob: Types_AccountStateBlob? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _accountStateBlob = source._accountStateBlob
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._accountStateBlob)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._accountStateBlob {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Storage_GetLatestAccountStateResponse, rhs: Storage_GetLatestAccountStateResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._accountStateBlob != rhs_storage._accountStateBlob {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Storage_GetAccountStateWithProofByVersionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetAccountStateWithProofByVersionRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.address)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.version)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularBytesField(value: self.address, fieldNumber: 1)
    }
    if self.version != 0 {
      try visitor.visitSingularUInt64Field(value: self.version, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Storage_GetAccountStateWithProofByVersionRequest, rhs: Storage_GetAccountStateWithProofByVersionRequest) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Storage_GetAccountStateWithProofByVersionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetAccountStateWithProofByVersionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_state_blob"),
    2: .standard(proto: "sparse_merkle_proof"),
  ]

  fileprivate class _StorageClass {
    var _accountStateBlob: Types_AccountStateBlob? = nil
    var _sparseMerkleProof: Types_SparseMerkleProof? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _accountStateBlob = source._accountStateBlob
      _sparseMerkleProof = source._sparseMerkleProof
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._accountStateBlob)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._sparseMerkleProof)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._accountStateBlob {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._sparseMerkleProof {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Storage_GetAccountStateWithProofByVersionResponse, rhs: Storage_GetAccountStateWithProofByVersionResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._accountStateBlob != rhs_storage._accountStateBlob {return false}
        if _storage._sparseMerkleProof != rhs_storage._sparseMerkleProof {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Storage_GetStartupInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetStartupInfoRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Storage_GetStartupInfoRequest, rhs: Storage_GetStartupInfoRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Storage_GetStartupInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetStartupInfoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "info"),
  ]

  fileprivate class _StorageClass {
    var _info: Storage_StartupInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _info = source._info
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._info)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._info {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Storage_GetStartupInfoResponse, rhs: Storage_GetStartupInfoResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._info != rhs_storage._info {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Storage_TreeState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TreeState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .standard(proto: "ledger_frozen_subtree_hashes"),
    3: .standard(proto: "account_state_root_hash"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.version)
      case 2: try decoder.decodeRepeatedBytesField(value: &self.ledgerFrozenSubtreeHashes)
      case 3: try decoder.decodeSingularBytesField(value: &self.accountStateRootHash)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.version != 0 {
      try visitor.visitSingularUInt64Field(value: self.version, fieldNumber: 1)
    }
    if !self.ledgerFrozenSubtreeHashes.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.ledgerFrozenSubtreeHashes, fieldNumber: 2)
    }
    if !self.accountStateRootHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.accountStateRootHash, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Storage_TreeState, rhs: Storage_TreeState) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.ledgerFrozenSubtreeHashes != rhs.ledgerFrozenSubtreeHashes {return false}
    if lhs.accountStateRootHash != rhs.accountStateRootHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Storage_StartupInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StartupInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "latest_ledger_info"),
    2: .standard(proto: "latest_validator_set"),
    3: .standard(proto: "committed_tree_state"),
    4: .standard(proto: "synced_tree_state"),
  ]

  fileprivate class _StorageClass {
    var _latestLedgerInfo: Types_LedgerInfoWithSignatures? = nil
    var _latestValidatorSet: Types_ValidatorSet? = nil
    var _committedTreeState: Storage_TreeState? = nil
    var _syncedTreeState: Storage_TreeState? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _latestLedgerInfo = source._latestLedgerInfo
      _latestValidatorSet = source._latestValidatorSet
      _committedTreeState = source._committedTreeState
      _syncedTreeState = source._syncedTreeState
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._latestLedgerInfo)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._latestValidatorSet)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._committedTreeState)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._syncedTreeState)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._latestLedgerInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._latestValidatorSet {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._committedTreeState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._syncedTreeState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Storage_StartupInfo, rhs: Storage_StartupInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._latestLedgerInfo != rhs_storage._latestLedgerInfo {return false}
        if _storage._latestValidatorSet != rhs_storage._latestValidatorSet {return false}
        if _storage._committedTreeState != rhs_storage._committedTreeState {return false}
        if _storage._syncedTreeState != rhs_storage._syncedTreeState {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Storage_GetEpochChangeLedgerInfosRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetEpochChangeLedgerInfosRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_epoch"),
    2: .standard(proto: "end_epoch"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.startEpoch)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.endEpoch)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.startEpoch != 0 {
      try visitor.visitSingularUInt64Field(value: self.startEpoch, fieldNumber: 1)
    }
    if self.endEpoch != 0 {
      try visitor.visitSingularUInt64Field(value: self.endEpoch, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Storage_GetEpochChangeLedgerInfosRequest, rhs: Storage_GetEpochChangeLedgerInfosRequest) -> Bool {
    if lhs.startEpoch != rhs.startEpoch {return false}
    if lhs.endEpoch != rhs.endEpoch {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Storage_BackupAccountStateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BackupAccountStateRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.version)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.version != 0 {
      try visitor.visitSingularUInt64Field(value: self.version, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Storage_BackupAccountStateRequest, rhs: Storage_BackupAccountStateRequest) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Storage_BackupAccountStateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BackupAccountStateResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_key"),
    2: .standard(proto: "account_state_blob"),
  ]

  fileprivate class _StorageClass {
    var _accountKey: Data = SwiftProtobuf.Internal.emptyData
    var _accountStateBlob: Types_AccountStateBlob? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _accountKey = source._accountKey
      _accountStateBlob = source._accountStateBlob
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBytesField(value: &_storage._accountKey)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._accountStateBlob)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._accountKey.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._accountKey, fieldNumber: 1)
      }
      if let v = _storage._accountStateBlob {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Storage_BackupAccountStateResponse, rhs: Storage_BackupAccountStateResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._accountKey != rhs_storage._accountKey {return false}
        if _storage._accountStateBlob != rhs_storage._accountStateBlob {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Storage_GetAccountStateRangeProofRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetAccountStateRangeProofRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rightmost_key"),
    2: .same(proto: "version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.rightmostKey)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.version)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rightmostKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.rightmostKey, fieldNumber: 1)
    }
    if self.version != 0 {
      try visitor.visitSingularUInt64Field(value: self.version, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Storage_GetAccountStateRangeProofRequest, rhs: Storage_GetAccountStateRangeProofRequest) -> Bool {
    if lhs.rightmostKey != rhs.rightmostKey {return false}
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Storage_GetAccountStateRangeProofResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetAccountStateRangeProofResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "proof"),
  ]

  fileprivate class _StorageClass {
    var _proof: Types_SparseMerkleRangeProof? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _proof = source._proof
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._proof)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._proof {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Storage_GetAccountStateRangeProofResponse, rhs: Storage_GetAccountStateRangeProofResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._proof != rhs_storage._proof {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Storage_BackupTransactionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BackupTransactionRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_version"),
    2: .standard(proto: "num_transactions"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.startVersion)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.numTransactions)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.startVersion != 0 {
      try visitor.visitSingularUInt64Field(value: self.startVersion, fieldNumber: 1)
    }
    if self.numTransactions != 0 {
      try visitor.visitSingularUInt64Field(value: self.numTransactions, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Storage_BackupTransactionRequest, rhs: Storage_BackupTransactionRequest) -> Bool {
    if lhs.startVersion != rhs.startVersion {return false}
    if lhs.numTransactions != rhs.numTransactions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Storage_BackupTransactionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BackupTransactionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transaction"),
  ]

  fileprivate class _StorageClass {
    var _transaction: Types_Transaction? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _transaction = source._transaction
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._transaction)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._transaction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Storage_BackupTransactionResponse, rhs: Storage_BackupTransactionResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._transaction != rhs_storage._transaction {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Storage_BackupTransactionInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BackupTransactionInfoRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_version"),
    2: .standard(proto: "num_transactions"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.startVersion)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.numTransactions)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.startVersion != 0 {
      try visitor.visitSingularUInt64Field(value: self.startVersion, fieldNumber: 1)
    }
    if self.numTransactions != 0 {
      try visitor.visitSingularUInt64Field(value: self.numTransactions, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Storage_BackupTransactionInfoRequest, rhs: Storage_BackupTransactionInfoRequest) -> Bool {
    if lhs.startVersion != rhs.startVersion {return false}
    if lhs.numTransactions != rhs.numTransactions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Storage_BackupTransactionInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BackupTransactionInfoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "transaction_info"),
  ]

  fileprivate class _StorageClass {
    var _transactionInfo: Types_TransactionInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _transactionInfo = source._transactionInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._transactionInfo)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._transactionInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Storage_BackupTransactionInfoResponse, rhs: Storage_BackupTransactionInfoResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._transactionInfo != rhs_storage._transactionInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
