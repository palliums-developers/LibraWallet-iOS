// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: storage.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) The Libra Core Contributors
// SPDX-License-Identifier: Apache-2.0

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Storage_SaveTransactionsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Transactions to persist.
  var txnsToCommit: [Types_TransactionToCommit] {
    get {return _storage._txnsToCommit}
    set {_uniqueStorage()._txnsToCommit = newValue}
  }

  /// The version of the first transaction in `txns_to_commit`.
  var firstVersion: UInt64 {
    get {return _storage._firstVersion}
    set {_uniqueStorage()._firstVersion = newValue}
  }

  /// If this is set, Storage will check its state after applying the above
  /// transactions matches info in this LedgerInfo before committing otherwise
  /// it denies the request.
  var ledgerInfoWithSignatures: Types_LedgerInfoWithSignatures {
    get {return _storage._ledgerInfoWithSignatures ?? Types_LedgerInfoWithSignatures()}
    set {_uniqueStorage()._ledgerInfoWithSignatures = newValue}
  }
  /// Returns true if `ledgerInfoWithSignatures` has been explicitly set.
  var hasLedgerInfoWithSignatures: Bool {return _storage._ledgerInfoWithSignatures != nil}
  /// Clears the value of `ledgerInfoWithSignatures`. Subsequent reads from it will return its default value.
  mutating func clearLedgerInfoWithSignatures() {_storage._ledgerInfoWithSignatures = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Storage_SaveTransactionsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Storage_GetTransactionsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The version to start with.
  var startVersion: UInt64 = 0

  /// The size of the transaction batch.
  var batchSize: UInt64 = 0

  /// All the proofs returned in the response should be relative to this
  /// given version.
  var ledgerVersion: UInt64 = 0

  /// Used to return the events associated with each transaction
  var fetchEvents: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Storage_GetTransactionsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var txnListWithProof: Types_TransactionListWithProof {
    get {return _storage._txnListWithProof ?? Types_TransactionListWithProof()}
    set {_uniqueStorage()._txnListWithProof = newValue}
  }
  /// Returns true if `txnListWithProof` has been explicitly set.
  var hasTxnListWithProof: Bool {return _storage._txnListWithProof != nil}
  /// Clears the value of `txnListWithProof`. Subsequent reads from it will return its default value.
  mutating func clearTxnListWithProof() {_storage._txnListWithProof = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Storage_GetAccountStateWithProofByVersionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// The account address to query with.
  var address: Data = SwiftProtobuf.Internal.emptyData

  //// The version the query is based on.
  var version: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Storage_GetAccountStateWithProofByVersionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// The optional blob of account state blob.
  var accountStateBlob: Types_AccountStateBlob {
    get {return _storage._accountStateBlob ?? Types_AccountStateBlob()}
    set {_uniqueStorage()._accountStateBlob = newValue}
  }
  /// Returns true if `accountStateBlob` has been explicitly set.
  var hasAccountStateBlob: Bool {return _storage._accountStateBlob != nil}
  /// Clears the value of `accountStateBlob`. Subsequent reads from it will return its default value.
  mutating func clearAccountStateBlob() {_storage._accountStateBlob = nil}

  //// The state root hash the query is based on.
  var sparseMerkleProof: Types_SparseMerkleProof {
    get {return _storage._sparseMerkleProof ?? Types_SparseMerkleProof()}
    set {_uniqueStorage()._sparseMerkleProof = newValue}
  }
  /// Returns true if `sparseMerkleProof` has been explicitly set.
  var hasSparseMerkleProof: Bool {return _storage._sparseMerkleProof != nil}
  /// Clears the value of `sparseMerkleProof`. Subsequent reads from it will return its default value.
  mutating func clearSparseMerkleProof() {_storage._sparseMerkleProof = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Storage_GetStartupInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Storage_GetStartupInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// When this is empty, Storage needs to be bootstrapped via the bootstrap API
  var info: Storage_StartupInfo {
    get {return _storage._info ?? Storage_StartupInfo()}
    set {_uniqueStorage()._info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  var hasInfo: Bool {return _storage._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  mutating func clearInfo() {_storage._info = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Storage_StartupInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The latest LedgerInfo. Note that at start up storage can have more
  /// transactions than the latest LedgerInfo indicates due to an incomplete
  /// start up sync.
  var ledgerInfo: Types_LedgerInfo {
    get {return _storage._ledgerInfo ?? Types_LedgerInfo()}
    set {_uniqueStorage()._ledgerInfo = newValue}
  }
  /// Returns true if `ledgerInfo` has been explicitly set.
  var hasLedgerInfo: Bool {return _storage._ledgerInfo != nil}
  /// Clears the value of `ledgerInfo`. Subsequent reads from it will return its default value.
  mutating func clearLedgerInfo() {_storage._ledgerInfo = nil}

  /// The latest version. All fields below are based on this version.
  var latestVersion: UInt64 {
    get {return _storage._latestVersion}
    set {_uniqueStorage()._latestVersion = newValue}
  }

  /// The latest account state root hash.
  var accountStateRootHash: Data {
    get {return _storage._accountStateRootHash}
    set {_uniqueStorage()._accountStateRootHash = newValue}
  }

  /// From left to right, root hashes of all frozen subtrees.
  var ledgerFrozenSubtreeHashes: [Data] {
    get {return _storage._ledgerFrozenSubtreeHashes}
    set {_uniqueStorage()._ledgerFrozenSubtreeHashes = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "storage"

extension Storage_SaveTransactionsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SaveTransactionsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "txns_to_commit"),
    2: .standard(proto: "first_version"),
    3: .standard(proto: "ledger_info_with_signatures"),
  ]

  fileprivate class _StorageClass {
    var _txnsToCommit: [Types_TransactionToCommit] = []
    var _firstVersion: UInt64 = 0
    var _ledgerInfoWithSignatures: Types_LedgerInfoWithSignatures? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _txnsToCommit = source._txnsToCommit
      _firstVersion = source._firstVersion
      _ledgerInfoWithSignatures = source._ledgerInfoWithSignatures
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._txnsToCommit)
        case 2: try decoder.decodeSingularUInt64Field(value: &_storage._firstVersion)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._ledgerInfoWithSignatures)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._txnsToCommit.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._txnsToCommit, fieldNumber: 1)
      }
      if _storage._firstVersion != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._firstVersion, fieldNumber: 2)
      }
      if let v = _storage._ledgerInfoWithSignatures {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Storage_SaveTransactionsRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._txnsToCommit != other_storage._txnsToCommit {return false}
        if _storage._firstVersion != other_storage._firstVersion {return false}
        if _storage._ledgerInfoWithSignatures != other_storage._ledgerInfoWithSignatures {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Storage_SaveTransactionsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SaveTransactionsResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Storage_SaveTransactionsResponse) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Storage_GetTransactionsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetTransactionsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_version"),
    2: .standard(proto: "batch_size"),
    3: .standard(proto: "ledger_version"),
    4: .standard(proto: "fetch_events"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.startVersion)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.batchSize)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.ledgerVersion)
      case 4: try decoder.decodeSingularBoolField(value: &self.fetchEvents)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.startVersion != 0 {
      try visitor.visitSingularUInt64Field(value: self.startVersion, fieldNumber: 1)
    }
    if self.batchSize != 0 {
      try visitor.visitSingularUInt64Field(value: self.batchSize, fieldNumber: 2)
    }
    if self.ledgerVersion != 0 {
      try visitor.visitSingularUInt64Field(value: self.ledgerVersion, fieldNumber: 3)
    }
    if self.fetchEvents != false {
      try visitor.visitSingularBoolField(value: self.fetchEvents, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Storage_GetTransactionsRequest) -> Bool {
    if self.startVersion != other.startVersion {return false}
    if self.batchSize != other.batchSize {return false}
    if self.ledgerVersion != other.ledgerVersion {return false}
    if self.fetchEvents != other.fetchEvents {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Storage_GetTransactionsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetTransactionsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "txn_list_with_proof"),
  ]

  fileprivate class _StorageClass {
    var _txnListWithProof: Types_TransactionListWithProof? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _txnListWithProof = source._txnListWithProof
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._txnListWithProof)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._txnListWithProof {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Storage_GetTransactionsResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._txnListWithProof != other_storage._txnListWithProof {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Storage_GetAccountStateWithProofByVersionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetAccountStateWithProofByVersionRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.address)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.version)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularBytesField(value: self.address, fieldNumber: 1)
    }
    if self.version != 0 {
      try visitor.visitSingularUInt64Field(value: self.version, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Storage_GetAccountStateWithProofByVersionRequest) -> Bool {
    if self.address != other.address {return false}
    if self.version != other.version {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Storage_GetAccountStateWithProofByVersionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetAccountStateWithProofByVersionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_state_blob"),
    2: .standard(proto: "sparse_merkle_proof"),
  ]

  fileprivate class _StorageClass {
    var _accountStateBlob: Types_AccountStateBlob? = nil
    var _sparseMerkleProof: Types_SparseMerkleProof? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _accountStateBlob = source._accountStateBlob
      _sparseMerkleProof = source._sparseMerkleProof
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._accountStateBlob)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._sparseMerkleProof)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._accountStateBlob {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._sparseMerkleProof {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Storage_GetAccountStateWithProofByVersionResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._accountStateBlob != other_storage._accountStateBlob {return false}
        if _storage._sparseMerkleProof != other_storage._sparseMerkleProof {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Storage_GetStartupInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetStartupInfoRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Storage_GetStartupInfoRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Storage_GetStartupInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetStartupInfoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "info"),
  ]

  fileprivate class _StorageClass {
    var _info: Storage_StartupInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _info = source._info
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._info)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._info {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Storage_GetStartupInfoResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._info != other_storage._info {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Storage_StartupInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StartupInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ledger_info"),
    2: .standard(proto: "latest_version"),
    3: .standard(proto: "account_state_root_hash"),
    4: .standard(proto: "ledger_frozen_subtree_hashes"),
  ]

  fileprivate class _StorageClass {
    var _ledgerInfo: Types_LedgerInfo? = nil
    var _latestVersion: UInt64 = 0
    var _accountStateRootHash: Data = SwiftProtobuf.Internal.emptyData
    var _ledgerFrozenSubtreeHashes: [Data] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _ledgerInfo = source._ledgerInfo
      _latestVersion = source._latestVersion
      _accountStateRootHash = source._accountStateRootHash
      _ledgerFrozenSubtreeHashes = source._ledgerFrozenSubtreeHashes
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._ledgerInfo)
        case 2: try decoder.decodeSingularUInt64Field(value: &_storage._latestVersion)
        case 3: try decoder.decodeSingularBytesField(value: &_storage._accountStateRootHash)
        case 4: try decoder.decodeRepeatedBytesField(value: &_storage._ledgerFrozenSubtreeHashes)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._ledgerInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._latestVersion != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._latestVersion, fieldNumber: 2)
      }
      if !_storage._accountStateRootHash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._accountStateRootHash, fieldNumber: 3)
      }
      if !_storage._ledgerFrozenSubtreeHashes.isEmpty {
        try visitor.visitRepeatedBytesField(value: _storage._ledgerFrozenSubtreeHashes, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Storage_StartupInfo) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._ledgerInfo != other_storage._ledgerInfo {return false}
        if _storage._latestVersion != other_storage._latestVersion {return false}
        if _storage._accountStateRootHash != other_storage._accountStateRootHash {return false}
        if _storage._ledgerFrozenSubtreeHashes != other_storage._ledgerFrozenSubtreeHashes {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
