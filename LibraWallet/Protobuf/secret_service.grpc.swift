//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: secret_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol SecretService_SecretServiceGenerateKeyCall: ClientCallUnary {}

fileprivate final class SecretService_SecretServiceGenerateKeyCallBase: ClientCallUnaryBase<SecretService_GenerateKeyRequest, SecretService_GenerateKeyResponse>, SecretService_SecretServiceGenerateKeyCall {
  override class var method: String { return "/secret_service.SecretService/GenerateKey" }
}

internal protocol SecretService_SecretServiceGetPublicKeyCall: ClientCallUnary {}

fileprivate final class SecretService_SecretServiceGetPublicKeyCallBase: ClientCallUnaryBase<SecretService_PublicKeyRequest, SecretService_PublicKeyResponse>, SecretService_SecretServiceGetPublicKeyCall {
  override class var method: String { return "/secret_service.SecretService/GetPublicKey" }
}

internal protocol SecretService_SecretServiceSignCall: ClientCallUnary {}

fileprivate final class SecretService_SecretServiceSignCallBase: ClientCallUnaryBase<SecretService_SignRequest, SecretService_SignResponse>, SecretService_SecretServiceSignCall {
  override class var method: String { return "/secret_service.SecretService/Sign" }
}


/// Instantiate SecretService_SecretServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol SecretService_SecretServiceService: ServiceClient {
  /// Synchronous. Unary.
  func generateKey(_ request: SecretService_GenerateKeyRequest) throws -> SecretService_GenerateKeyResponse
  /// Asynchronous. Unary.
  func generateKey(_ request: SecretService_GenerateKeyRequest, completion: @escaping (SecretService_GenerateKeyResponse?, CallResult) -> Void) throws -> SecretService_SecretServiceGenerateKeyCall

  /// Synchronous. Unary.
  func getPublicKey(_ request: SecretService_PublicKeyRequest) throws -> SecretService_PublicKeyResponse
  /// Asynchronous. Unary.
  func getPublicKey(_ request: SecretService_PublicKeyRequest, completion: @escaping (SecretService_PublicKeyResponse?, CallResult) -> Void) throws -> SecretService_SecretServiceGetPublicKeyCall

  /// Synchronous. Unary.
  func sign(_ request: SecretService_SignRequest) throws -> SecretService_SignResponse
  /// Asynchronous. Unary.
  func sign(_ request: SecretService_SignRequest, completion: @escaping (SecretService_SignResponse?, CallResult) -> Void) throws -> SecretService_SecretServiceSignCall

}

internal final class SecretService_SecretServiceServiceClient: ServiceClientBase, SecretService_SecretServiceService {
  /// Synchronous. Unary.
  internal func generateKey(_ request: SecretService_GenerateKeyRequest) throws -> SecretService_GenerateKeyResponse {
    return try SecretService_SecretServiceGenerateKeyCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func generateKey(_ request: SecretService_GenerateKeyRequest, completion: @escaping (SecretService_GenerateKeyResponse?, CallResult) -> Void) throws -> SecretService_SecretServiceGenerateKeyCall {
    return try SecretService_SecretServiceGenerateKeyCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getPublicKey(_ request: SecretService_PublicKeyRequest) throws -> SecretService_PublicKeyResponse {
    return try SecretService_SecretServiceGetPublicKeyCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getPublicKey(_ request: SecretService_PublicKeyRequest, completion: @escaping (SecretService_PublicKeyResponse?, CallResult) -> Void) throws -> SecretService_SecretServiceGetPublicKeyCall {
    return try SecretService_SecretServiceGetPublicKeyCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func sign(_ request: SecretService_SignRequest) throws -> SecretService_SignResponse {
    return try SecretService_SecretServiceSignCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func sign(_ request: SecretService_SignRequest, completion: @escaping (SecretService_SignResponse?, CallResult) -> Void) throws -> SecretService_SecretServiceSignCall {
    return try SecretService_SecretServiceSignCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol SecretService_SecretServiceProvider: ServiceProvider {
  func generateKey(request: SecretService_GenerateKeyRequest, session: SecretService_SecretServiceGenerateKeySession) throws -> SecretService_GenerateKeyResponse
  func getPublicKey(request: SecretService_PublicKeyRequest, session: SecretService_SecretServiceGetPublicKeySession) throws -> SecretService_PublicKeyResponse
  func sign(request: SecretService_SignRequest, session: SecretService_SecretServiceSignSession) throws -> SecretService_SignResponse
}

extension SecretService_SecretServiceProvider {
  internal var serviceName: String { return "secret_service.SecretService" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/secret_service.SecretService/GenerateKey":
      return try SecretService_SecretServiceGenerateKeySessionBase(
        handler: handler,
        providerBlock: { try self.generateKey(request: $0, session: $1 as! SecretService_SecretServiceGenerateKeySessionBase) })
          .run()
    case "/secret_service.SecretService/GetPublicKey":
      return try SecretService_SecretServiceGetPublicKeySessionBase(
        handler: handler,
        providerBlock: { try self.getPublicKey(request: $0, session: $1 as! SecretService_SecretServiceGetPublicKeySessionBase) })
          .run()
    case "/secret_service.SecretService/Sign":
      return try SecretService_SecretServiceSignSessionBase(
        handler: handler,
        providerBlock: { try self.sign(request: $0, session: $1 as! SecretService_SecretServiceSignSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol SecretService_SecretServiceGenerateKeySession: ServerSessionUnary {}

fileprivate final class SecretService_SecretServiceGenerateKeySessionBase: ServerSessionUnaryBase<SecretService_GenerateKeyRequest, SecretService_GenerateKeyResponse>, SecretService_SecretServiceGenerateKeySession {}

internal protocol SecretService_SecretServiceGetPublicKeySession: ServerSessionUnary {}

fileprivate final class SecretService_SecretServiceGetPublicKeySessionBase: ServerSessionUnaryBase<SecretService_PublicKeyRequest, SecretService_PublicKeyResponse>, SecretService_SecretServiceGetPublicKeySession {}

internal protocol SecretService_SecretServiceSignSession: ServerSessionUnary {}

fileprivate final class SecretService_SecretServiceSignSessionBase: ServerSessionUnaryBase<SecretService_SignRequest, SecretService_SignResponse>, SecretService_SecretServiceSignSession {}

