//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: execution.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Execution_ExecutionExecuteBlockCall: ClientCallUnary {}

fileprivate final class Execution_ExecutionExecuteBlockCallBase: ClientCallUnaryBase<Execution_ExecuteBlockRequest, Execution_ExecuteBlockResponse>, Execution_ExecutionExecuteBlockCall {
  override class var method: String { return "/execution.Execution/ExecuteBlock" }
}

internal protocol Execution_ExecutionCommitBlockCall: ClientCallUnary {}

fileprivate final class Execution_ExecutionCommitBlockCallBase: ClientCallUnaryBase<Execution_CommitBlockRequest, Execution_CommitBlockResponse>, Execution_ExecutionCommitBlockCall {
  override class var method: String { return "/execution.Execution/CommitBlock" }
}

internal protocol Execution_ExecutionExecuteChunkCall: ClientCallUnary {}

fileprivate final class Execution_ExecutionExecuteChunkCallBase: ClientCallUnaryBase<Execution_ExecuteChunkRequest, Execution_ExecuteChunkResponse>, Execution_ExecutionExecuteChunkCall {
  override class var method: String { return "/execution.Execution/ExecuteChunk" }
}


/// Instantiate Execution_ExecutionServiceClient, then call methods of this protocol to make API calls.
internal protocol Execution_ExecutionService: ServiceClient {
  /// Synchronous. Unary.
  func executeBlock(_ request: Execution_ExecuteBlockRequest) throws -> Execution_ExecuteBlockResponse
  /// Asynchronous. Unary.
  func executeBlock(_ request: Execution_ExecuteBlockRequest, completion: @escaping (Execution_ExecuteBlockResponse?, CallResult) -> Void) throws -> Execution_ExecutionExecuteBlockCall

  /// Synchronous. Unary.
  func commitBlock(_ request: Execution_CommitBlockRequest) throws -> Execution_CommitBlockResponse
  /// Asynchronous. Unary.
  func commitBlock(_ request: Execution_CommitBlockRequest, completion: @escaping (Execution_CommitBlockResponse?, CallResult) -> Void) throws -> Execution_ExecutionCommitBlockCall

  /// Synchronous. Unary.
  func executeChunk(_ request: Execution_ExecuteChunkRequest) throws -> Execution_ExecuteChunkResponse
  /// Asynchronous. Unary.
  func executeChunk(_ request: Execution_ExecuteChunkRequest, completion: @escaping (Execution_ExecuteChunkResponse?, CallResult) -> Void) throws -> Execution_ExecutionExecuteChunkCall

}

internal final class Execution_ExecutionServiceClient: ServiceClientBase, Execution_ExecutionService {
  /// Synchronous. Unary.
  internal func executeBlock(_ request: Execution_ExecuteBlockRequest) throws -> Execution_ExecuteBlockResponse {
    return try Execution_ExecutionExecuteBlockCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func executeBlock(_ request: Execution_ExecuteBlockRequest, completion: @escaping (Execution_ExecuteBlockResponse?, CallResult) -> Void) throws -> Execution_ExecutionExecuteBlockCall {
    return try Execution_ExecutionExecuteBlockCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func commitBlock(_ request: Execution_CommitBlockRequest) throws -> Execution_CommitBlockResponse {
    return try Execution_ExecutionCommitBlockCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func commitBlock(_ request: Execution_CommitBlockRequest, completion: @escaping (Execution_CommitBlockResponse?, CallResult) -> Void) throws -> Execution_ExecutionCommitBlockCall {
    return try Execution_ExecutionCommitBlockCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func executeChunk(_ request: Execution_ExecuteChunkRequest) throws -> Execution_ExecuteChunkResponse {
    return try Execution_ExecutionExecuteChunkCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func executeChunk(_ request: Execution_ExecuteChunkRequest, completion: @escaping (Execution_ExecuteChunkResponse?, CallResult) -> Void) throws -> Execution_ExecutionExecuteChunkCall {
    return try Execution_ExecutionExecuteChunkCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Execution_ExecutionProvider: ServiceProvider {
  func executeBlock(request: Execution_ExecuteBlockRequest, session: Execution_ExecutionExecuteBlockSession) throws -> Execution_ExecuteBlockResponse
  func commitBlock(request: Execution_CommitBlockRequest, session: Execution_ExecutionCommitBlockSession) throws -> Execution_CommitBlockResponse
  func executeChunk(request: Execution_ExecuteChunkRequest, session: Execution_ExecutionExecuteChunkSession) throws -> Execution_ExecuteChunkResponse
}

extension Execution_ExecutionProvider {
  internal var serviceName: String { return "execution.Execution" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/execution.Execution/ExecuteBlock":
      return try Execution_ExecutionExecuteBlockSessionBase(
        handler: handler,
        providerBlock: { try self.executeBlock(request: $0, session: $1 as! Execution_ExecutionExecuteBlockSessionBase) })
          .run()
    case "/execution.Execution/CommitBlock":
      return try Execution_ExecutionCommitBlockSessionBase(
        handler: handler,
        providerBlock: { try self.commitBlock(request: $0, session: $1 as! Execution_ExecutionCommitBlockSessionBase) })
          .run()
    case "/execution.Execution/ExecuteChunk":
      return try Execution_ExecutionExecuteChunkSessionBase(
        handler: handler,
        providerBlock: { try self.executeChunk(request: $0, session: $1 as! Execution_ExecutionExecuteChunkSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol Execution_ExecutionExecuteBlockSession: ServerSessionUnary {}

fileprivate final class Execution_ExecutionExecuteBlockSessionBase: ServerSessionUnaryBase<Execution_ExecuteBlockRequest, Execution_ExecuteBlockResponse>, Execution_ExecutionExecuteBlockSession {}

internal protocol Execution_ExecutionCommitBlockSession: ServerSessionUnary {}

fileprivate final class Execution_ExecutionCommitBlockSessionBase: ServerSessionUnaryBase<Execution_CommitBlockRequest, Execution_CommitBlockResponse>, Execution_ExecutionCommitBlockSession {}

internal protocol Execution_ExecutionExecuteChunkSession: ServerSessionUnary {}

fileprivate final class Execution_ExecutionExecuteChunkSessionBase: ServerSessionUnaryBase<Execution_ExecuteChunkRequest, Execution_ExecuteChunkResponse>, Execution_ExecutionExecuteChunkSession {}

