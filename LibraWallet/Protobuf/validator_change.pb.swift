// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: validator_change.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) The Libra Core Contributors
// SPDX-License-Identifier: Apache-2.0

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// This is used to prove validator changes.  When a validator is changing, it
/// triggers an event on /validator_change_account/events/sent.  To tell the
/// client about validator changes, we query
/// /validator_change_account/events/sent to get all versions that contain
/// validator changes after the version that we are trying to update from. For
/// each of these versions, the old validator set would have signed the ledger
/// info at that version.  The client needs this as well as the event results +
/// proof.  The client can then verify that these events were under the current
/// tree and that the changes were signed by the old validators (and that the
/// events correctly show which validators are the new validators).
///
/// This message represents a single validator change event and the proof that
/// corresponds to it
struct Types_ValidatorChangeEventWithProof {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ledgerInfoWithSigs: Types_LedgerInfoWithSignatures {
    get {return _storage._ledgerInfoWithSigs ?? Types_LedgerInfoWithSignatures()}
    set {_uniqueStorage()._ledgerInfoWithSigs = newValue}
  }
  /// Returns true if `ledgerInfoWithSigs` has been explicitly set.
  var hasLedgerInfoWithSigs: Bool {return _storage._ledgerInfoWithSigs != nil}
  /// Clears the value of `ledgerInfoWithSigs`. Subsequent reads from it will return its default value.
  mutating func clearLedgerInfoWithSigs() {_storage._ledgerInfoWithSigs = nil}

  var eventWithProof: Types_EventWithProof {
    get {return _storage._eventWithProof ?? Types_EventWithProof()}
    set {_uniqueStorage()._eventWithProof = newValue}
  }
  /// Returns true if `eventWithProof` has been explicitly set.
  var hasEventWithProof: Bool {return _storage._eventWithProof != nil}
  /// Clears the value of `eventWithProof`. Subsequent reads from it will return its default value.
  mutating func clearEventWithProof() {_storage._eventWithProof = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "types"

extension Types_ValidatorChangeEventWithProof: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ValidatorChangeEventWithProof"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ledger_info_with_sigs"),
    2: .standard(proto: "event_with_proof"),
  ]

  fileprivate class _StorageClass {
    var _ledgerInfoWithSigs: Types_LedgerInfoWithSignatures? = nil
    var _eventWithProof: Types_EventWithProof? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _ledgerInfoWithSigs = source._ledgerInfoWithSigs
      _eventWithProof = source._eventWithProof
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._ledgerInfoWithSigs)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._eventWithProof)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._ledgerInfoWithSigs {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._eventWithProof {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Types_ValidatorChangeEventWithProof) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._ledgerInfoWithSigs != other_storage._ledgerInfoWithSigs {return false}
        if _storage._eventWithProof != other_storage._eventWithProof {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
