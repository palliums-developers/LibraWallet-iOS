// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: state_synchronizer.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) The Libra Core Contributors
// SPDX-License-Identifier: Apache-2.0

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Network_GetChunkRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var knownVersion: UInt64 {
    get {return _storage._knownVersion}
    set {_uniqueStorage()._knownVersion = newValue}
  }

  var limit: UInt64 {
    get {return _storage._limit}
    set {_uniqueStorage()._limit = newValue}
  }

  var timeout: UInt64 {
    get {return _storage._timeout}
    set {_uniqueStorage()._timeout = newValue}
  }

  var ledgerInfoWithSigs: Types_LedgerInfoWithSignatures {
    get {return _storage._ledgerInfoWithSigs ?? Types_LedgerInfoWithSignatures()}
    set {_uniqueStorage()._ledgerInfoWithSigs = newValue}
  }
  /// Returns true if `ledgerInfoWithSigs` has been explicitly set.
  var hasLedgerInfoWithSigs: Bool {return _storage._ledgerInfoWithSigs != nil}
  /// Clears the value of `ledgerInfoWithSigs`. Subsequent reads from it will return its default value.
  mutating func clearLedgerInfoWithSigs() {_storage._ledgerInfoWithSigs = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Network_GetChunkResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ledgerInfoWithSigs: Types_LedgerInfoWithSignatures {
    get {return _storage._ledgerInfoWithSigs ?? Types_LedgerInfoWithSignatures()}
    set {_uniqueStorage()._ledgerInfoWithSigs = newValue}
  }
  /// Returns true if `ledgerInfoWithSigs` has been explicitly set.
  var hasLedgerInfoWithSigs: Bool {return _storage._ledgerInfoWithSigs != nil}
  /// Clears the value of `ledgerInfoWithSigs`. Subsequent reads from it will return its default value.
  mutating func clearLedgerInfoWithSigs() {_storage._ledgerInfoWithSigs = nil}

  /// chunk of transactions with proof corresponding to version in `ledger_info_with_sigs`
  var txnListWithProof: Types_TransactionListWithProof {
    get {return _storage._txnListWithProof ?? Types_TransactionListWithProof()}
    set {_uniqueStorage()._txnListWithProof = newValue}
  }
  /// Returns true if `txnListWithProof` has been explicitly set.
  var hasTxnListWithProof: Bool {return _storage._txnListWithProof != nil}
  /// Clears the value of `txnListWithProof`. Subsequent reads from it will return its default value.
  mutating func clearTxnListWithProof() {_storage._txnListWithProof = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Network_StateSynchronizerMsg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var message: OneOf_Message? {
    get {return _storage._message}
    set {_uniqueStorage()._message = newValue}
  }

  var chunkRequest: Network_GetChunkRequest {
    get {
      if case .chunkRequest(let v)? = _storage._message {return v}
      return Network_GetChunkRequest()
    }
    set {_uniqueStorage()._message = .chunkRequest(newValue)}
  }

  var chunkResponse: Network_GetChunkResponse {
    get {
      if case .chunkResponse(let v)? = _storage._message {return v}
      return Network_GetChunkResponse()
    }
    set {_uniqueStorage()._message = .chunkResponse(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Message: Equatable {
    case chunkRequest(Network_GetChunkRequest)
    case chunkResponse(Network_GetChunkResponse)

    static func ==(lhs: Network_StateSynchronizerMsg.OneOf_Message, rhs: Network_StateSynchronizerMsg.OneOf_Message) -> Bool {
      switch (lhs, rhs) {
      case (.chunkRequest(let l), .chunkRequest(let r)): return l == r
      case (.chunkResponse(let l), .chunkResponse(let r)): return l == r
      default: return false
      }
    }
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "network"

extension Network_GetChunkRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetChunkRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "known_version"),
    2: .same(proto: "limit"),
    3: .same(proto: "timeout"),
    4: .standard(proto: "ledger_info_with_sigs"),
  ]

  fileprivate class _StorageClass {
    var _knownVersion: UInt64 = 0
    var _limit: UInt64 = 0
    var _timeout: UInt64 = 0
    var _ledgerInfoWithSigs: Types_LedgerInfoWithSignatures? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _knownVersion = source._knownVersion
      _limit = source._limit
      _timeout = source._timeout
      _ledgerInfoWithSigs = source._ledgerInfoWithSigs
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._knownVersion)
        case 2: try decoder.decodeSingularUInt64Field(value: &_storage._limit)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._timeout)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._ledgerInfoWithSigs)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._knownVersion != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._knownVersion, fieldNumber: 1)
      }
      if _storage._limit != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._limit, fieldNumber: 2)
      }
      if _storage._timeout != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._timeout, fieldNumber: 3)
      }
      if let v = _storage._ledgerInfoWithSigs {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Network_GetChunkRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._knownVersion != other_storage._knownVersion {return false}
        if _storage._limit != other_storage._limit {return false}
        if _storage._timeout != other_storage._timeout {return false}
        if _storage._ledgerInfoWithSigs != other_storage._ledgerInfoWithSigs {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Network_GetChunkResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetChunkResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ledger_info_with_sigs"),
    2: .standard(proto: "txn_list_with_proof"),
  ]

  fileprivate class _StorageClass {
    var _ledgerInfoWithSigs: Types_LedgerInfoWithSignatures? = nil
    var _txnListWithProof: Types_TransactionListWithProof? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _ledgerInfoWithSigs = source._ledgerInfoWithSigs
      _txnListWithProof = source._txnListWithProof
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._ledgerInfoWithSigs)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._txnListWithProof)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._ledgerInfoWithSigs {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._txnListWithProof {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Network_GetChunkResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._ledgerInfoWithSigs != other_storage._ledgerInfoWithSigs {return false}
        if _storage._txnListWithProof != other_storage._txnListWithProof {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Network_StateSynchronizerMsg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StateSynchronizerMsg"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chunk_request"),
    2: .standard(proto: "chunk_response"),
  ]

  fileprivate class _StorageClass {
    var _message: Network_StateSynchronizerMsg.OneOf_Message?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _message = source._message
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Network_GetChunkRequest?
          if let current = _storage._message {
            try decoder.handleConflictingOneOf()
            if case .chunkRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._message = .chunkRequest(v)}
        case 2:
          var v: Network_GetChunkResponse?
          if let current = _storage._message {
            try decoder.handleConflictingOneOf()
            if case .chunkResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._message = .chunkResponse(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._message {
      case .chunkRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .chunkResponse(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Network_StateSynchronizerMsg) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._message != other_storage._message {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
